AWSTemplateFormatVersion: '2010-09-09'
Description: Thor Lambda function
Parameters:
  BuildTimestamp:
    Type: String
Outputs:
  ThorLambda:
    Value:
      Ref: ThorLambda
Resources:
  ThorLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "translator.handler"
      Role:
        Fn::GetAtt:
          - "LambdaExecutionRole"
          - "Arn"
      Code:
        S3Bucket: "thor-20170830"
        S3Key:
          Fn::Join:
            - "/"
            - - Ref: BuildTimestamp
              - "thor.zip"
      Runtime: "python2.7"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
  APILambdaPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ThorLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: API
          - "/*/GET/*"
    Type: AWS::Lambda::Permission
  API:
    Properties:
      Description: Thor API
      Name: ThorAPI
    Type: AWS::ApiGateway::RestApi
  APIDeployment:
    DependsOn: APIFirstResourceMethodGET
    Properties:
      RestApiId:
        Ref: API
    Type: AWS::ApiGateway::Deployment
  APIFirstResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - API
        - RootResourceId
      PathPart: "{param1}"
      RestApiId:
        Ref: API
  APIFirstResourceMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "$input.params('whatever')"
          StatusCode: '200'
        - ResponseTemplates:
            application/json: "$input.params('whatever')"
          SelectionPattern: "[a-zA-Z]+.*"
          StatusCode: '500'
        RequestTemplates:
          application/json:
            Fn::Join:
            - ''
            - - '{"param1": "$input.params(''param1'')", "param2": "$input.params(''param2'')"}'
        Type: AWS
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - ThorLambda
              - Arn
            - "/invocations"
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '404'
      RequestParameters:
        method.request.path.param1: true
        method.request.querystring.param2: true
      ResourceId:
        Ref: APIFirstResource
      RestApiId:
        Ref: API
  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      CacheClusterEnabled: false
      DeploymentId:
        Ref: APIDeployment
      RestApiId:
        Ref: API
      StageName: live
